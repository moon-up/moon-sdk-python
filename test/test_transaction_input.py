# coding: utf-8

"""
    moon-vault-api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.transaction_input import TransactionInput

class TestTransactionInput(unittest.TestCase):
    """TransactionInput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TransactionInput:
        """Test TransactionInput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TransactionInput`
        """
        model = TransactionInput()
        if include_optional:
            return TransactionInput(
                supported_params = openapi_client.models.transaction_input_supported_params.TransactionInput_supportedParams(
                    partner_data = openapi_client.models.transaction_input_supported_params_partner_data.TransactionInput_supportedParams_partnerData(
                        redirect_url = openapi_client.models.transaction_input_supported_params_partner_data_redirect_url.TransactionInput_supportedParams_partnerData_redirectUrl(
                            success = '', ), ), 
                    theme = openapi_client.models.transaction_input_supported_params_theme.TransactionInput_supportedParams_theme(
                        border_radius = 1.337, 
                        card_color = '', 
                        secondary_text_color = '', 
                        primary_text_color = '', 
                        secondary_color = '', 
                        primary_color = '', 
                        theme_name = '', 
                        is_dark = True, ), ),
                wallet = openapi_client.models.transaction_input_wallet.TransactionInput_wallet(
                    address = '', ),
                meta_data = openapi_client.models.transaction_input_meta_data.TransactionInput_metaData(
                    quote_id = '', ),
                originating_host = '',
                partner_context = '',
                uuid = '',
                network = '',
                payment_method = '',
                type = '',
                amount = 1.337,
                destination = '',
                source = '',
                onramp = ''
            )
        else:
            return TransactionInput(
                supported_params = openapi_client.models.transaction_input_supported_params.TransactionInput_supportedParams(
                    partner_data = openapi_client.models.transaction_input_supported_params_partner_data.TransactionInput_supportedParams_partnerData(
                        redirect_url = openapi_client.models.transaction_input_supported_params_partner_data_redirect_url.TransactionInput_supportedParams_partnerData_redirectUrl(
                            success = '', ), ), 
                    theme = openapi_client.models.transaction_input_supported_params_theme.TransactionInput_supportedParams_theme(
                        border_radius = 1.337, 
                        card_color = '', 
                        secondary_text_color = '', 
                        primary_text_color = '', 
                        secondary_color = '', 
                        primary_color = '', 
                        theme_name = '', 
                        is_dark = True, ), ),
                wallet = openapi_client.models.transaction_input_wallet.TransactionInput_wallet(
                    address = '', ),
                meta_data = openapi_client.models.transaction_input_meta_data.TransactionInput_metaData(
                    quote_id = '', ),
                originating_host = '',
                partner_context = '',
                uuid = '',
                network = '',
                payment_method = '',
                type = '',
                amount = 1.337,
                destination = '',
                source = '',
                onramp = '',
        )
        """

    def testTransactionInput(self):
        """Test TransactionInput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
