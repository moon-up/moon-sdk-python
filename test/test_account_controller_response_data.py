# coding: utf-8

"""
    moon-vault-api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.account_controller_response_data import AccountControllerResponseData

class TestAccountControllerResponseData(unittest.TestCase):
    """AccountControllerResponseData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AccountControllerResponseData:
        """Test AccountControllerResponseData
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AccountControllerResponseData`
        """
        model = AccountControllerResponseData()
        if include_optional:
            return AccountControllerResponseData(
                nonce = 1.337,
                balance = '',
                moon_scan_url = '',
                transaction_hash = '',
                signed_transaction = '',
                signed_message = '',
                raw_transaction = '',
                signature = '',
                transaction = {
                    'key' : openapi_client.models.tx.Tx(
                        type = 1.337, 
                        chain_id = 1.337, 
                        data = '', 
                        gas = '', 
                        gas_price = '', 
                        gas_tip_cap = '', 
                        gas_fee_cap = '', 
                        value = '', 
                        nonce = 1.337, 
                        from = '', 
                        to = '', 
                        blob_gas = '', 
                        blob_gas_fee_cap = '', 
                        blob_hashes = [
                            ''
                            ], 
                        v = '', 
                        r = '', 
                        s = '', )
                    },
                user_ops = [
                    openapi_client.models.transaction_request.TransactionRequest(
                        nonce = '', 
                        data = '', 
                        value = '', 
                        to = '', 
                        from = '', 
                        max_fee_per_gas = '', 
                        max_priority_fee_per_gas = '', )
                    ],
                userop_transaction = '',
                keys = [
                    ''
                    ],
                address = '',
                name = '',
                data = '',
                encoding = '',
                header = True,
                signtype = True,
                domain = '',
                current_atoken_balance = '',
                current_borrow_balance = '',
                principal_borrow_balance = '',
                borrow_rate_mode = '',
                borrow_rate = '',
                liquidity_rate = '',
                origination_fee = '',
                variable_borrow_index = '',
                last_update_timestamp = '',
                usage_as_collateral_enabled = '',
                symbol = '',
                decimals = '',
                total_supply = '',
                contract_address = '',
                balance_of = '',
                allowance = '',
                balance_of = '',
                balance_of_batch = '',
                success = True,
                message = '',
                signed_tx = '',
                owner_of = '',
                token_uri = '',
                is_approved_for_all = ''
            )
        else:
            return AccountControllerResponseData(
                nonce = 1.337,
                balance = '',
                transaction_hash = '',
                signed_transaction = '',
                address = '',
                data = '',
                domain = '',
                current_atoken_balance = '',
                current_borrow_balance = '',
                principal_borrow_balance = '',
                borrow_rate_mode = '',
                borrow_rate = '',
                liquidity_rate = '',
                origination_fee = '',
                variable_borrow_index = '',
                last_update_timestamp = '',
                usage_as_collateral_enabled = '',
                success = True,
                message = '',
        )
        """

    def testAccountControllerResponseData(self):
        """Test AccountControllerResponseData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
